你是一名golang架构师,请使用参考代码和数据库表定义,使用整洁架构的思想生成对应的golang代码文件:

1. 根据数据库表结构生产对应的实体描述, 加上json和gorm的tag方便使用
2. 实现 repo 接口定义, repo 层需要定义该实体常用的增删改查方法，可以参考代码示例的风格,至少需要定义一个 Finds参数为 (context.Context, options ...dto.QueryOption)
3. repo 接口实现，使用 gorm 框架保存数据
4. usecase 接口定义
5. usecase 接口实现 ,错误定义使用 AppError 包装

数据库表定义如下:
CREATE TABLE `orders` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `source` varchar(10) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT '小程序' COMMENT '小程序|美团|饿了么|同程|售票口|补票',
  `pay_method` varchar(6) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL COMMENT '支付宝|现金|微信|云闪付',
  `com_id` int NOT NULL,
  `shop_id` int NOT NULL DEFAULT '0',
  `staff_id` int NOT NULL DEFAULT '0' COMMENT '收款人',
  `order_no` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL,
  `user_id` int NOT NULL,
  `inviter_id` int DEFAULT NULL COMMENT '邀请人',
  `seller_id` int NOT NULL DEFAULT '0' COMMENT '导购',
  `authcode` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL,
  `coupons` varchar(2048) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '',
  `discount_type` varchar(10) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT 'none',
  `status` char(8) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT 'unpay' COMMENT '状态 unpay|paid|refund|cancel|timeout（未付款|付款）',
  `total` decimal(10,2) DEFAULT '0.00' COMMENT '单位元',
  `real_total` decimal(10,2) NOT NULL COMMENT '单位分',
  `consumed` varchar(1000) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '',
  `is_comment` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '0',
  `address` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL COMMENT '收货地址{}',
  `express_status` char(8) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT 'unship' COMMENT '快递状态 unship|shipping|signed|comment',
  `express` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL COMMENT '快递信息{}',
  `paid_at` timestamp NULL DEFAULT NULL COMMENT '付款时间',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `goodslist` varchar(2048) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT '[]',
  `express_total` int DEFAULT '0' COMMENT '快递费用',
  `express_type` char(8) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL COMMENT '如果都为虚拟产品 不需要快递，normal|free|collect|nil',
  `goods_type` char(10) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL COMMENT 'goods,ticket,room',
  `transaction_id` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL COMMENT '微信单号',
  `note` varchar(1024) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '',
  `info` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL COMMENT '关键额外信息| 满三件包邮',
  `address_id` int DEFAULT '0' COMMENT '收货地址',
  PRIMARY KEY (`id`,`user_id`),
  UNIQUE KEY `com_order_no_index` (`com_id`,`order_no`),
  KEY `user_index` (`user_id`),
  KEY `com_created_at_index` (`com_id`,`created_at`)
) ENGINE=InnoDB AUTO_INCREMENT=37944 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_unicode_ci;

下面是一个使用 go-clean 思想实现的一个 golang web项目的示例，你写的代码风格要和下面代码风格保持一致:
>>> Begin Filename=errors.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/app_err/errors.go
```package app_err

import (
	"fmt"
	"runtime"
)

const (
	// 通用错误类型
	ErrInternalError = "INTERNAL_ERROR" // 内部错误
	ErrNotFound      = "NOT_FOUND"      // 找不到资源
	ErrUnauthorized  = "UNAUTHORIZED"   // 未授权
	ErrForbidden     = "FORBIDDEN"      // 禁止访问
	ErrBadRequest    = "BAD_REQUEST"    // 错误的请求
	ErrConflict      = "CONFLICT"       // 冲突

	// 数据库相关错误类型
	ErrDBConnectionFailed = "DB_CONNECTION_FAILED" // 数据库连接失败
	ErrDBQueryFailed      = "DB_QUERY_FAILED"      // 数据库查询失败
	ErrDBInsertFailed     = "DB_INSERT_FAILED"     // 数据库插入失败
	ErrDBUpdateFailed     = "DB_UPDATE_FAILED"     // 数据库更新失败
	ErrDBDeleteFailed     = "DB_DELETE_FAILED"     // 数据库删除失败

	// 认证和授权相关错误类型
	ErrInvalidCredentials = "INVALID_CREDENTIALS" // 无效的凭证
	ErrInvalidToken       = "INVALID_TOKEN"       // 无效的凭证
	ErrExpiredToken       = "EXPIRED_TOKEN"       // 令牌已过期
	ErrPermissionDenied   = "PERMISSION_DENIED"   // 权限被拒绝
	ErrLoginFailed        = "LOGIN_FAILED"        // 登录失败              = "PERMISSION_DENIED"   // 权限被拒绝

	// 文件操作相关错误类型
	ErrFileNotFound    = "FILE_NOT_FOUND"    // 文件不存在
	ErrFileReadFailed  = "FILE_READ_FAILED"  // 文件读取失败
	ErrFileWriteFailed = "FILE_WRITE_FAILED" // 文件写入失败
)

const (
	MsgInitAppError     = "初始化程序异常"
	MsgDbQueryErr       = "查找数据异常"
	MsgDbUpdateErr      = "更新数据异常"
	MsgPermissionDenied = "非法访问"
	MsgExpiredToken     = "访问令牌过期"
	MsgLoginFailed      = "登陆失败"
	MsgLoginPasswdErr   = "密码错误"
	MsgDbInsertFailed   = "数据库插入失败"
	MsgParamNoMobile    = "缺失手机号"
)

// AppError 是应用程序中的自定义错误类型
type AppError struct {
	Code    string // 错误代码
	Message string // 错误消息
	File    string // 出错文件名
	Line    int    // 出错行号
	Err     error  // 原始错误（可选）
}

// NewError 创建一个新的 AppError 实例
func NewError(code string, message string, err ...error) *AppError {
	_, file, line, _ := runtime.Caller(1)
	e := &AppError{
		Code:    code,
		Message: message,
		File:    file,
		Line:    line,
	}
	if len(err) > 0 {
		e.Err = err[0]
	}
	return e
}

// Error 实现了 error 接口
func (e *AppError) Error() string {
	if e.Err != nil {
		return fmt.Sprintf("[%s:%d] %s (Code: %s) - %s", e.File, e.Line, e.Message, e.Code, e.Err.Error())
	}
	return fmt.Sprintf("[%s:%d] %s (Code: %s)", e.File, e.Line, e.Message, e.Code)
}

// Unwrap 实现了 Wrapper 接口
func (e *AppError) Unwrap() error {
	return e.Err
}
```
<<< End Filename=errors.go
>>> Begin Filename=resp.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/controller/http/resp/resp.go
```package resp

import (
	"net/http"

	"go-clean/internal/app_err"
	"go-clean/internal/entity/dto"

	"github.com/gin-gonic/gin"
)

type Response struct {
	Code       string          `json:"code"`
	Data       interface{}     `json:"data"`
	Doc        string          `json:"doc,omitempty"`
	Message    string          `json:"message,omitempty"`
	Pagination *dto.Pagination `json:"pagination,omitempty"`
}

func Success(c *gin.Context, data interface{}) {
	c.JSON(http.StatusOK, Response{
		Data: data,
	})
}

// SuccessWithPagination 请求成功需要分页
func SuccessWithPagination(c *gin.Context, data interface{}, pagination *dto.Pagination) {
	c.JSON(http.StatusOK, Response{
		Data:       data,
		Pagination: pagination,
	})
}

// Fail 请求失败时候调用
func Fail(c *gin.Context, err error) {
	if err == nil {
		return
	}

	appErr, ok := err.(*app_err.AppError)
	if !ok {
		c.JSON(http.StatusInternalServerError, Response{
			Message: err.Error(),
		})
		return
	}

	var httpCode int
	var doc string
	switch appErr.Code {
	case app_err.ErrBadRequest, app_err.ErrConflict:
		httpCode = http.StatusBadRequest
	case app_err.ErrExpiredToken, app_err.ErrInvalidToken, app_err.ErrInvalidCredentials, app_err.ErrPermissionDenied:
		httpCode = http.StatusUnauthorized
	case app_err.ErrNotFound:
		httpCode = http.StatusNotFound
	case app_err.ErrFileReadFailed:
		httpCode = http.StatusInternalServerError
	default:
		httpCode = http.StatusInternalServerError
	}

	c.JSON(httpCode, Response{
		Code:    appErr.Code,
		Doc:     doc,
		Message: appErr.Message,
	})
	return
}
```
<<< End Filename=resp.go
>>> Begin Filename=error.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/controller/http/v1/error.go
```package v1

import (
	"github.com/gin-gonic/gin"
)

type response struct {
	Error string `json:"error" example:"message"`
}

func errorResponse(c *gin.Context, code int, msg string) {
	c.AbortWithStatusJSON(code, response{msg})
}
```
<<< End Filename=error.go
>>> Begin Filename=router.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/controller/http/v1/router.go
```// Package v1 implements routing paths. Each services in own file.
package v1

import (
	"github.com/gin-gonic/gin"
	// Swagger docs.
	_ "go-clean/docs"
	"go-clean/internal/usecase"
)

// NewRouter -.
// Swagger spec:
// @title       Go Clean Template API
// @description Using a translation service as an example
// @version     1.0
// @host        localhost:8080
// @BasePath    /v1
func NewRouter(handler *gin.Engine, u usecase.UserUseCase) {
	// Options
	handler.Use(gin.Logger())
	handler.Use(gin.Recovery())

	// Routers
	h := handler.Group("/v1")
	{
		newUserController(h, u)
	}
}
```
<<< End Filename=router.go
>>> Begin Filename=user.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/controller/http/v1/user.go
```package v1

import (
	"go-clean/internal/entity"
	"go-clean/internal/usecase"
	"net/http"

	"github.com/gin-gonic/gin"
)

// UserController handles HTTP requests for user management
type UserController struct {
	userUseCase usecase.UserUseCase
}

// NewUserController creates a new UserController with the given userUseCase
func newUserController(handler *gin.RouterGroup, userUseCase usecase.UserUseCase) *UserController {
	uc := &UserController{
		userUseCase: userUseCase,
	}
	handler.POST("/register", uc.Register)
	handler.POST("/login", uc.Login)
	return uc
}

// RegisterReq defines the structure for the user registration request.
type RegisterReq struct {
	Email    string `json:"email" binding:"required,email"`
	Mobile   string `json:"mobile" binding:"required"`
	Password string `json:"password" binding:"required,min=8"`
	Name     string `json:"name" binding:"required"`
}

// Register handles the user registration process
func (uc *UserController) Register(c *gin.Context) {
	var request RegisterReq
	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Transform DTO to entity for use case logic. This layer can also hash the password.
	newUser := entity.User{
		Email:    request.Email,
		Password: request.Password, // Consider hashing the password before saving
		Name:     request.Name,
	}

	err := uc.userUseCase.Register(c.Request.Context(), &newUser)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "User registered successfully."})
}

var loginInfoReq struct {
	Mobile   string `json:"mobile" `
	Password string `json:"password"`
}

// Login handles the user login process
func (uc *UserController) Login(c *gin.Context) {
	if err := c.ShouldBindJSON(&loginInfoReq); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	user, err := uc.userUseCase.Login(c.Request.Context(), loginInfoReq.Mobile, loginInfoReq.Password)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid credentials"})
		return
	}

	// Assuming creating and returning JWT token or similar logic to be implemented here
	token := "dummy_jwt_token_for_" + user.Email // Replace with actual token generation logic

	c.JSON(http.StatusOK, gin.H{"message": "Login successful", "token": token})
}
```
<<< End Filename=user.go
>>> Begin Filename=common.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/entity/dto/common.go
```package dto

type Page struct {
	PageSize int `json:"page_size"`
	PageNum  int `json:"page_num"`
}

type Pagination struct {
	TotalCount int64 `json:"total_count"`
	HasMore    bool  `json:"has_more"`
	Page
}
```
<<< End Filename=common.go
>>> Begin Filename=query.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/entity/dto/query.go
```package dto

import "gorm.io/gorm"

type QueryOption interface {
	Apply(*gorm.DB)
}

type QueryOptionFunc func(*gorm.DB)

func (f QueryOptionFunc) Apply(db *gorm.DB) {
	f(db)
}

// QueryWithID 查询ID
func QueryWithID(id int) QueryOption {
	return QueryOptionFunc(func(db *gorm.DB) {
		db.Where("id = ?", id)
	})
}

// QueryWithAPIToken 查询API Token
func QueryWithAPIToken(token int) QueryOption {
	return QueryOptionFunc(func(db *gorm.DB) {
		db.Where("api_token = ?", token)
	})
}

// QueryWithOpenID 查询OpenID
func QueryWithOpenID(openid string) QueryOption {
	return QueryOptionFunc(func(db *gorm.DB) {
		db.Where("open_id = ?", openid)
	})
}
```
<<< End Filename=query.go
>>> Begin Filename=translation.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/entity/translation.go
```// Package entity defines main entities for business logic (services), data base mapping and
// HTTP response objects if suitable. Each logic group entities in own file.
package entity

// Translation -.
type Translation struct {
	Source      string `json:"source"       example:"auto"`
	Destination string `json:"destination"  example:"en"`
	Original    string `json:"original"     example:"текст для перевода"`
	Translation string `json:"translation"  example:"text for translation"`
}
```
<<< End Filename=translation.go
>>> Begin Filename=user.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/entity/user.go
```package entity

import "time"

// User represents the user entity for Gorm mappings from users table.
type User struct {
	ID            uint      `gorm:"primary_key" json:"id"`
	Mobile        string    `gorm:"column:mobile" json:"mobile"`
	Name          string    `gorm:"column:name" json:"name"`
	Nickname      string    `gorm:"column:nickname" json:"nickname"`
	Email         string    `gorm:"column:email" json:"email"`
	Score         int       `gorm:"column:score" json:"score"`
	InviterID     int       `gorm:"column:inviter_id" json:"inviter_id"`
	Code          string    `gorm:"column:code" json:"code"`
	APIToken      string    `gorm:"column:api_token" json:"api_token"`
	City          string    `gorm:"column:city" json:"city"`
	Birthday      string    `gorm:"column:brithday" json:"birthday"`
	Sex           string    `gorm:"column:sex" json:"sex"`
	TotalScore    int       `gorm:"column:total_score" json:"total_score"`
	OpenID        string    `gorm:"column:openid" json:"openid"`
	Avatar        string    `gorm:"column:avatar" json:"avatar"`
	Addr          string    `gorm:"column:addr" json:"addr"`
	Password      string    `gorm:"column:password" json:"-"`
	RememberToken string    `gorm:"column:remember_token" json:"remember_token"`
	CreatedAt     time.Time `gorm:"column:created_at" json:"created_at"`
	UpdatedAt     time.Time `gorm:"column:updated_at" json:"updated_at"`
	XcxOpenID     string    `gorm:"column:xcx_openid" json:"xcx_openid"`
	UnionID       string    `gorm:"column:unionid" json:"unionid"`
	SessionKey    string    `gorm:"column:session_key" json:"session_key"`
	IsStaff       bool      `gorm:"column:is_staff" json:"is_staff"`
	IsRoot        bool      `gorm:"column:is_root" json:"is_root"`
	CheckCode     string    `gorm:"column:check_code" json:"check_code"`
	Status        int       `gorm:"column:status" json:"status"`
}
```
<<< End Filename=user.go
>>> Begin Filename=interfaces.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/usecase/interfaces.go
```// Package usecase implements application business logic. Each logic group in own file.
package usecase

import (
	"context"
	"go-clean/internal/entity/dto"

	"go-clean/internal/entity"
)

//go:generate mockgen -source=interfaces.go -destination=./mocks_test.go -package=usecase_test

type (
	// UserRepo defines the interface for user data storage behavior
	UserRepo interface {
		Create(ctx context.Context, user *entity.User) error
		FindByID(ctx context.Context, id uint) (*entity.User, error)
		FindByOpenID(ctx context.Context, openID string) (*entity.User, error)
		FindByMobile(ctx context.Context, mobile string) (*entity.User, error)
		FindByAPIToken(ctx context.Context, openID string) (*entity.User, error)
		Finds(ctx context.Context, options ...dto.QueryOption) ([]*entity.User, error)
		Update(ctx context.Context, user *entity.User) error
	}
)

type (
	// UserUseCase -.
	UserUseCase interface {
		CreateUser(ctx context.Context, user *entity.User) error
		GetUserByID(ctx context.Context, id uint) (*entity.User, error)
		UpdateUser(ctx context.Context, user *entity.User) error
		Login(ctx context.Context, mobile, password string) (*entity.User, error)
		Register(ctx context.Context, user *entity.User) error
	}

	// Translation -.
	Translation interface {
		History(context.Context) ([]entity.Translation, error)
	}

	// TranslationRepo -.
	TranslationRepo interface {
		GetHistory(context.Context) ([]entity.Translation, error)
	}
)
```
<<< End Filename=interfaces.go
>>> Begin Filename=user.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/usecase/repo/user.go
```package repo

import (
	"context"
	"go-clean/internal/entity"
	"go-clean/internal/entity/dto"

	"gorm.io/gorm"
)

type UserRepo struct {
	DB *gorm.DB
}

func NewGormUserRepository(db *gorm.DB) *UserRepo {
	return &UserRepo{DB: db}
}

func (r *UserRepo) Create(ctx context.Context, user *entity.User) error {
	return r.DB.WithContext(ctx).Create(user).Error
}

func (r *UserRepo) FindByID(ctx context.Context, id uint) (*entity.User, error) {
	var user entity.User
	err := r.DB.WithContext(ctx).Where("id = ?", id).First(&user).Error
	return &user, err
}

func (r *UserRepo) FindByOpenID(ctx context.Context, openID string) (*entity.User, error) {
	var user entity.User
	err := r.DB.WithContext(ctx).Where("open_id = ?", openID).First(&user).Error
	return &user, err
}

func (r *UserRepo) FindByMobile(ctx context.Context, mobile string) (*entity.User, error) {
	var user entity.User
	err := r.DB.WithContext(ctx).Where("mobile = ?", mobile).First(&user).Error
	return &user, err
}

func (r *UserRepo) FindByAPIToken(ctx context.Context, apiToken string) (*entity.User, error) {
	var user entity.User
	err := r.DB.WithContext(ctx).Where("api_token = ?", apiToken).First(&user).Error
	return &user, err
}

func (r *UserRepo) Finds(ctx context.Context, options ...dto.QueryOption) ([]*entity.User, error) {
	var users []*entity.User
	query := r.DB.WithContext(ctx)
	for _, option := range options {
		option.Apply(query)
	}
	err := query.Find(&users).Error
	return users, err
}

func (r *UserRepo) Update(ctx context.Context, user *entity.User) error {
	return r.DB.WithContext(ctx).Save(user).Error
}
```
<<< End Filename=user.go
>>> Begin Filename=user.go, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/internal/usecase/user.go
```package usecase

import (
	"context"
	"go-clean/internal/app_err"
	"go-clean/internal/entity"
	"go-clean/pkg/util"
	// Add additional imports if needed for hashing, logging, etc.
)

type userUseCase struct {
	userRepo UserRepo
}

func NewUserUseCase(userRepo UserRepo) UserUseCase {
	return &userUseCase{
		userRepo: userRepo,
	}
}

func (uc *userUseCase) CreateUser(ctx context.Context, user *entity.User) error {
	return uc.userRepo.Create(ctx, user)
}

func (uc *userUseCase) GetUserByID(ctx context.Context, id uint) (*entity.User, error) {
	return uc.userRepo.FindByID(ctx, id)
}

func (uc *userUseCase) UpdateUser(ctx context.Context, user *entity.User) error {
	return uc.userRepo.Update(ctx, user)
}

func (uc *userUseCase) Login(ctx context.Context, mobile, password string) (*entity.User, error) {
	user, err := uc.userRepo.FindByMobile(ctx, mobile)
	if err != nil {
		return nil, app_err.NewError(app_err.ErrLoginFailed, app_err.MsgLoginFailed, err)
	}

	if user.Password != password {
		return nil, app_err.NewError(app_err.ErrLoginFailed, app_err.MsgLoginPasswdErr)
	}
	return user, nil
}

func (uc *userUseCase) Register(ctx context.Context, user *entity.User) error {
	if user.Mobile == "" {
		return app_err.NewError(app_err.ErrBadRequest, app_err.MsgParamNoMobile)
	}

	user.Password = util.Md5(util.Md5(user.Password))
	return uc.CreateUser(ctx, user)
}
```
<<< End Filename=user.go
>>> Begin Filename=question.ai, Path=/Users/mac/code/go/src/github.com/mytoolzone/gomall/question.ai